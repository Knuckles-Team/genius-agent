---
agents:
  - name: assistant
    instructions: Assistant. You are a general assistant. Try your best to provide truthful and concise answers. Reply `TERMINATE` in the end when everything is done.
    is_termination_msg: 'lambda x: isinstance(x, dict) and x.get("content") is not None and "TERMINATE" == str(x.get("content", ""))[-9:].upper()'
    agent_type: assistant
    max_consecutive_auto_reply: 3
    llm_config:
      cache_seed: 42
      temperature: 0
      config_list:
        - model: mistral-7b-instruct-v0.1.Q4_K_S
          api_key: NA
          base_url: "http://localhost:8080/v1"

          api_version: v1
      timeout: 300

#  - name: user_proxy
#    chat_initiator: true
#    instructions: User Proxy. You can substitute for the user. Continue the conversation in a relevant direction. Reply `TERMINATE` in the end when everything is done.
#    human_input_mode: NEVER # Never - Never wait for human input, Alawys - Always waits for input from user before AI begins, Terminate - Wait for input for user when conversation terminates
#    is_termination_msg: 'lambda x: isinstance(x, dict) and x.get("content") is not None and "TERMINATE" == str(x.get("content", ""))[-9:].upper()'
#    max_consecutive_auto_reply: 3
#    agent_type: user_proxy
#    llm_config:
#      cache_seed: 42
#      temperature: 0
#      config_list:
#        - model: mistral-7b-instruct-v0.1.Q4_K_S
#          api_key: NA
#          base_url: "http://localhost:8080/v1"
#          api_type: openai
#          api_version: v1
#      timeout: 300

#  - name: user_proxy
#    chat_initiator: true
#    instructions: User Proxy. You can substitute for the user. Continue the conversation in a relevant direction. Reply `TERMINATE` in the end when everything is done.
#    human_input_mode: NEVER # Never - Never wait for human input, Alawys - Always waits for input from user before AI begins, Terminate - Wait for input for user when conversation terminates
#    is_termination_msg: 'lambda x: isinstance(x, dict) and x.get("content") is not None and "TERMINATE" == str(x.get("content", ""))[-9:].upper()'
#    max_consecutive_auto_reply: 10
#    agent_type: user_proxy
#    code_execution_config:
#      work_dir: coding
#      user_docker: false
#    llm_config:
#      cache_seed: 42
#      temperature: 0
#      config_list:
#        - model: mistral-7b-instruct-v0.1.Q4_K_S
#          api_key: NA
#          base_url: "http://localhost:8080/v1"
#          api_type: openai
#          api_version: v1
#      filter_dict:
#        model:
#          - mistral-7b-instruct-v0.1.Q4_K_S
#      timeout: 3600
#      functions:
#        - name: python
#          description: run arbitrary python and return the result
#          parameters:
#            type: object
#            properties:
#              cell:
#                type: string
#                description: Valid Python code to execute.
#            required:
#              - cell
#        - name: bash
#          description: run a shell script and return the execution result.
#          parameters:
#            type: object
#            properties:
#              script:
#                type: string
#                description: Valid shell script to execute
#            required:
#              - script
#        - name: media_downloader
#          description: run media-downloader to download a video or audio from the internet
#          parameters:
#            type: object
#            properties:
#              url:
#                type: string
#                description: Valid url to download
#              audio:
#                type: bool
#                description: This optional argument is used if the link wants to be saved
#                  as an mp3 or audio only
#              directory:
#                type: string
#                description: Directory to save the video
#            required:
#              - url
#        - name: write_to_file
#          description: Use this function to write content to a file
#          parameters:
#            type: object
#            properties:
#              filename:
#                type: string
#                description: The filename to write to
#              content:
#                type: string
#                description: The content to write
#            required:
#              - filename
#              - content
#        - name: read_from_file
#          description: Use this function to read the content of a file
#          parameters:
#            type: object
#            properties:
#              filename:
#                type: string
#                description: The filename to read from
#            required:
#              - filename
#        - name: read_pdf
#          description: Use this function to read the content of a pdf file
#          parameters:
#            type: object
#            properties:
#              filename:
#                type: string
#                description: The filename to read from
#            required:
#              - filename
#        - name: create_directory
#          description: Use this function to create a directory
#          parameters:
#            type: object
#            properties:
#              directory_path:
#                type: string
#                description: The directory path to create
#            required:
#              - directory_path
#      function_map:
#        python: exec_python
#        bash: exec_bash
#        media_download: exec_media_downloader
#        write_to_file: exec_write_to_file
#        read_from_file: exec_read_from_file
#        create_directory: exec_create_directory
#
#  - name: validator
#    instructions: Validator. Execute the code written by the engineer and report the result. Reply `TERMINATE` in the end when everything is done.
#    is_termination_msg: 'lambda x: isinstance(x, dict) and x.get("content") is not None and "TERMINATE" == str(x.get("content", ""))[-9:].upper()'
#    agent_type: user_proxy
#    max_consecutive_auto_reply: 2
#    llm_config:
#      cache_seed: 42
#      temperature: 0
#      config_list:
#        - model: mistral-7b-instruct-v0.1.Q4_K_S
#          api_key: NA
#          base_url: "http://localhost:8080/v1"
#
#          api_version: v1
#      filter_dict:
#        model:
#          - mistral-7b-instruct-v0.1.Q4_K_S
#      timeout: 300
#
  - name: planner
    instructions: Planner. Suggest a plan. Revise the plan based on feedback from
      admin, critic, and aid, until admin approval. The plan may involve an engineer
      who can write code and a scientist who doesn't write code. Explain the plan first.
      Be clear which step is performed by an engineer, and which step is performed by
      a scientist. Reply `TERMINATE` in the end when everything is done.
    is_termination_msg: 'lambda x: isinstance(x, dict) and x.get("content") is not None and "TERMINATE" == str(x.get("content", ""))[-9:].upper()'
    agent_type: assistant
    max_consecutive_auto_reply: 1
    llm_config:
      cache_seed: 42
      temperature: 0
      config_list:
        - model: mistral-7b-instruct-v0.1.Q4_K_S
          api_key: NA
          base_url: "http://localhost:8080/v1"

          api_version: v1
#      filter_dict:
#        model:
#          - mistral-7b-instruct-v0.1.Q4_K_S
      timeout: 3600

  - name: engineer
    instructions: Engineer. You are a senior python and react engineer. Reply `TERMINATE` in the end when everything
      is done.
    is_termination_msg: 'lambda x: isinstance(x, dict) and x.get("content") is not None and "TERMINATE" == str(x.get("content", ""))[-9:].upper()'
    max_consecutive_auto_reply: 5
    agent_type: assistant
    llm_config:
      cache_seed: 42
      temperature: 0
      config_list:
#        - model: yarn-mistral-7b-128k.Q3_K_L
#          api_key: NA
#          base_url: "http://localhost:8080/v1"
#          api_type: openai
#          api_version: v1
#          max_retries: 2
        - model: mistral-7b-instruct-v0.1.Q4_K_S
          api_key: NA
          base_url: "http://localhost:8080/v1"
          api_version: v1
#        - model: mistral-7b--instruct-v0.1.Q5_K_S
#          api_key: NA
#          base_url: "http://localhost:8080/v1"
#          api_type: openai
#          api_version: v1
#        - model: TheBloke/WizardLM-13B-V1.2-GGML/wizardlm-13b-v1.2.ggmlv3.q2_K.bin
#          api_key: NA
#          base_url: "http://localhost:8080/v1"
#          api_type: openai
#          api_version: v1
#        - model: codellama-7b-instruct
#          api_key: NA
#          base_url: "http://localhost:8080/v1"
#          api_type: openai
#          api_version: v1
#        - model: gpt-4-32k
#          api_key: NA
#        - model: gpt-4-32k
#          api_key: NA
#          base_url: NA
#          api_type: openai
#          api_version: 2023-06-01-preview
#        - model: gpt-4-32k-0314
#          api_key: NA
#          base_url: NA
#          api_type: openai
#          api_version: 2023-06-01-preview
#      filter_dict:
#        model:
#          - mistral-7b-instruct-v0.1.Q4_K_S
#          - yarn-mistral-7b-128k.Q3_K_L
#          - mistral-7b--instruct-v0.1.Q5_K_S
#          - TheBloke/WizardLM-13B-V1.2-GGML/wizardlm-13b-v1.2.ggmlv3.q2_K.bin
#          - mistral-7b-instruct-v0.1.Q8_0
#          - codellama-7b-instruct
      timeout: 3600
      functions:
        - name: python
          description: run arbitrary python and return the result
          parameters:
            type: object
            properties:
              cell:
                type: string
                description: Valid Python code to execute.
            required:
              - cell
        - name: bash
          description: run a shell script and return the execution result.
          parameters:
            type: object
            properties:
              script:
                type: string
                description: Valid shell script to execute
            required:
              - script
        - name: media_downloader
          description: run media-downloader to download a video or audio from the internet
          parameters:
            type: object
            properties:
              url:
                type: string
                description: Valid url to download
              audio:
                type: bool
                description: This optional argument is used if the link wants to be saved
                  as an mp3 or audio only
              directory:
                type: string
                description: Directory to save the video
            required:
              - url
        - name: write_to_file
          description: Use this function to write content to a file
          parameters:
            type: object
            properties:
              filename:
                type: string
                description: The filename to write to
              content:
                type: string
                description: The content to write
            required:
              - filename
              - content
        - name: read_from_file
          description: Use this function to read the content of a file
          parameters:
            type: object
            properties:
              filename:
                type: string
                description: The filename to read from
            required:
              - filename
        - name: read_pdf
          description: Use this function to read the content of a pdf file
          parameters:
            type: object
            properties:
              filename:
                type: string
                description: The filename to read from
            required:
              - filename
        - name: create_directory
          description: Use this function to create a directory
          parameters:
            type: object
            properties:
              directory_path:
                type: string
                description: The directory path to create
            required:
              - directory_path
#      function_map:
#        python: exec_python
#        bash: exec_bash
#        media_download: exec_media_downloader
#        write_to_file: exec_write_to_file
#        read_from_file: exec_read_from_file
#        create_directory: exec_create_directory

#  - name: retrieve_engineer
#    instructions: Geniusbot Engineer. You are the engineer that developed the Python
#      modules in the documents retrieved. Reply `TERMINATE` in the end when everything
#      is done.
#    human_input_mode: NEVER
#    is_termination_msg: 'lambda x: isinstance(x, dict) and x.get("content") is not None and "TERMINATE" == str(x.get("content", ""))[-9:].upper()'
#    max_consecutive_auto_reply: 5
#    retrieve_config:
#      task: code
#      docs_path:
#        - "https://raw.githubusercontent.com/Knuckles-Team/media-downloader/main/README.md"
#        - "https://raw.githubusercontent.com/Knuckles-Team/repository-manager/main/README.md"
#      get_or_create: true
#      embedding_model: "all-mpnet-base-v2"
#      chunk_token_size: 3000
#      model: "gpt-4" # Only for determining token size: Options are: 32k 32000 , 16k for 16000 gpt-4 8000 or something else for 4000
#    agent_type: retrieve_user_proxy
#    llm_config:
#      cache_seed: 42
#      temperature: 0
#      config_list:
#        - model: yarn-mistral-7b-128k.Q3_K_L
#          api_key: NA
#          base_url: "http://localhost:8080/v1"
#          api_type: openai
#          api_version: v1
#          max_retries: 2
#        - model: mistral-7b-instruct-v0.1.Q4_K_S
#          api_key: NA
#          base_url: "http://localhost:8080/v1"
#          api_type: openai
#          api_version: v1
#        - model: mistral-7b--instruct-v0.1.Q5_K_S
#          api_key: NA
#          base_url: "http://localhost:8080/v1"
#          api_type: openai
#          api_version: v1
#        - model: TheBloke/WizardLM-13B-V1.2-GGML/wizardlm-13b-v1.2.ggmlv3.q2_K.bin
#          api_key: NA
#          base_url: "http://localhost:8080/v1"
#          api_type: openai
#          api_version: v1
#        - model: codellama-7b-instruct
#          api_key: NA
#          base_url: "http://localhost:8080/v1"
#          api_type: openai
#          api_version: v1
#        - model: gpt-4-32k
#          api_key: NA
#        - model: gpt-4-32k
#          api_key: NA
#          base_url: NA
#          api_type: openai
#          api_version: 2023-06-01-preview
#        - model: gpt-4-32k-0314
#          api_key: NA
#          base_url: NA
#          api_type: openai
#          api_version: 2023-06-01-preview
#      filter_dict:
#        model:
#          - yarn-mistral-7b-128k.Q3_K_L
#          - mistral-7b-instruct-v0.1.Q4_K_S
#          - mistral-7b--instruct-v0.1.Q5_K_S
#          - TheBloke/WizardLM-13B-V1.2-GGML/wizardlm-13b-v1.2.ggmlv3.q2_K.bin
#          - mistral-7b-instruct-v0.1.Q8_0
#          - codellama-7b-instruct
#      timeout: 3600
#      functions:
#        - name: python
#          description: run arbitrary python and return the result
#          parameters:
#            type: object
#            properties:
#              cell:
#                type: string
#                description: Valid Python code to execute.
#            required:
#              - cell
#        - name: bash
#          description: run a shell script and return the execution result.
#          parameters:
#            type: object
#            properties:
#              script:
#                type: string
#                description: Valid shell script to execute
#            required:
#              - script
#        - name: media_downloader
#          description: run media-downloader to download a video or audio from the internet
#          parameters:
#            type: object
#            properties:
#              url:
#                type: string
#                description: Valid url to download
#              audio:
#                type: bool
#                description: This optional argument is used if the link wants to be saved
#                  as an mp3 or audio only
#              directory:
#                type: string
#                description: Directory to save the video
#            required:
#              - url
#        - name: write_to_file
#          description: Use this function to write content to a file
#          parameters:
#            type: object
#            properties:
#              filename:
#                type: string
#                description: The filename to write to
#              content:
#                type: string
#                description: The content to write
#            required:
#              - filename
#              - content
#        - name: read_from_file
#          description: Use this function to read the content of a file
#          parameters:
#            type: object
#            properties:
#              filename:
#                type: string
#                description: The filename to read from
#            required:
#              - filename
#        - name: read_pdf
#          description: Use this function to read the content of a pdf file
#          parameters:
#            type: object
#            properties:
#              filename:
#                type: string
#                description: The filename to read from
#            required:
#              - filename
#        - name: create_directory
#          description: Use this function to create a directory
#          parameters:
#            type: object
#            properties:
#              directory_path:
#                type: string
#                description: The directory path to create
#            required:
#              - directory_path
#      function_map:
#        python: exec_python
#        bash: exec_bash
#        media_download: exec_media_downloader
#        write_to_file: exec_write_to_file
#        read_from_file: exec_read_from_file
#        create_directory: exec_create_directory
